# This file contains the fastlane.tools configuration
# You can find the documentation at https://docs.fastlane.tools
#
# For a list of all available actions, check out
#
#     https://docs.fastlane.tools/actions
#
# For a list of all available plugins, check out
#
#     https://docs.fastlane.tools/plugins/available-plugins
#

# Uncomment the line if you want fastlane to automatically update itself
# update_fastlane

# https://www.runway.team/blog/how-to-set-up-a-ci-cd-pipeline-for-your-ios-app-fastlane-github-actions

default_platform(:ios)

platform :ios do
  desc 'Load ASC API Key information to use in subsequent lanes'
  lane :load_asc_api_key do
    app_store_connect_api_key(
      key_id: ENV['ASC_KEY_ID'],
      issuer_id: ENV['ASC_ISSUER_ID'],
      key_content: ENV['ASC_KEY'],
      is_key_content_base64: false,
      in_house: false # Detecting this via ASC private key not currently supported
    )
  end

  desc 'Bump build number based on most recent TestFlight build number'
  lane :fetch_and_increment_build_number do
    app_identifier = CredentialsManager::AppfileConfig.try_fetch_value(:app_identifier)
    api_key = lane_context[SharedValues::APP_STORE_CONNECT_API_KEY]

    current_version = get_version_number(
      target: 'HackerNews'
    )
    latest_build_number = latest_testflight_build_number(
      api_key: api_key,
      version: current_version,
      app_identifier: app_identifier
    )
    increment_build_number(
      build_number: (latest_build_number + 1),
    )
  end

 desc 'Installs signing certificate in the keychain and downloads provisioning profiles from App Store Connect'
 lane :prepare_signing do |options|
   team_id = CredentialsManager::AppfileConfig.try_fetch_value(:team_id)
   api_key = lane_context[SharedValues::APP_STORE_CONNECT_API_KEY]
   app_identifier = CredentialsManager::AppfileConfig.try_fetch_value(:app_identifier)
   bundle_identifier = ENV['BUNDLE_ID'] || app_identifier
   profile_name = ENV['PROV_PROFILE_NAME'] || 'Github'

   keychain_name = 'signing'
   keychain_password = 'temp'

   delete_keychain(
     name: keychain_name
   ) if File.exist? File.expand_path("~/Library/Keychains/#{keychain_name}-db")

   create_keychain(
     name: keychain_name,
     password: keychain_password,
     default_keychain: true,
     unlock: true,
     timeout: 3600
   )

   import_certificate(
     certificate_path: ENV['SIGNING_KEY_FILE_PATH'],
     certificate_password: ENV['SIGNING_KEY_PASSWORD'],
     keychain_name: keychain_name,
     keychain_password: keychain_password
   )

   # Fetches and installs provisioning profiles from ASC
   sigh(
     adhoc: options[:adhoc],
     api_key: api_key,
     readonly: true,
     provisioning_name: profile_name,
     app_identifier: bundle_identifier
   )
  end

  desc 'Build the iOS app'
  lane :build_app_for_scheme do |options|
    app_identifier = CredentialsManager::AppfileConfig.try_fetch_value(:app_identifier)
    bundle_identifier = ENV['BUNDLE_ID'] || app_identifier

    profile_name = ENV['PROV_PROFILE_NAME'] || 'Github'
    output_name = 'hackernews-iOS' # .ipa name
    export_method = 'app-store'

    # Turn off automatic signing during build so correct code signing identity is guaranteed to be used
    update_code_signing_settings(
      use_automatic_signing: false,
      targets: ['HackerNews'],
      code_sign_identity: 'Apple Distribution',
      bundle_identifier: bundle_identifier,
      profile_name: profile_name,
      build_configurations: ['Release']
    )

    # build the app
    gym(
      scheme: 'HackerNews',
      output_name: output_name,
      configuration: 'Release',
      export_options: {
        method: export_method,
        provisioningProfiles: {
          bundle_identifier => profile_name
        },
        team_id: ENV['APPLE_TEAM_ID']
      }
    )
  end

  desc 'Upload to TestFlight / ASC'
  lane :upload_app do
    api_key = lane_context[SharedValues::APP_STORE_CONNECT_API_KEY]

    deliver(
      api_key: api_key,
      skip_screenshots: true,
      skip_metadata: true,
      skip_app_version_update: true,
      force: true, # Skips verification of HTML preview file (since this will be run from a CI machine)
      run_precheck_before_submit: false # Not supported through ASC API yet
    )
  end

  desc 'Build and upload to TestFlight + Emerge Tools'
  lane :build_upload_testflight do
    load_asc_api_key
    prepare_signing
    fetch_and_increment_build_number
    build_app_for_scheme(build_configuration: 'Release')
    upload_app
    emerge(tag: ENV['EMERGE_BUILD_TYPE'])

    # TODO(telkins)
    # sentry_cli(
    #   org_slug: 'emerge-tools',
    #   project_slug: 'hackernews-ios',
    #   include_sources: true
    # )
  end

  desc 'Build and upload to Emerge Tools'
  lane :build_upload_emerge do
    load_asc_api_key
    prepare_signing
    build_app_for_scheme(build_configuration: 'Release')
    emerge(tag: ENV['EMERGE_BUILD_TYPE'])
  end

  desc 'Build and upload snapshot build to Emerge Tools'
  lane :build_upload_emerge_snapshot do
    emerge_snapshot(scheme: "HackerNews")
  end
end
